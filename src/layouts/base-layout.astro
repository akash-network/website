---
import "@/styles/globals.css";

import TailwindIndicator from "@/components/tailwind-indicator.astro";
import BaseHead from "@/components/base-head.astro";
import Header from "@/components/header/header.astro";
import Footer from "@/components/footer/footer.astro";
import { ViewTransitions } from "astro:transitions";
import CTA from "@/components/CTA.astro";
import AsideTailwindClasses from "@/lib/aside/aside-tailwind-classes.astro";

interface Props {
  title: string;
  description?: string;
  image?: string;
  classname?: string;
}

const { title, description, image, classname } = Astro.props;

const isProd = import.meta.env.PROD;
---

<!doctype html>
<html
  lang="en"
  style="scrollbar-gutter: stable;"
  class="scroll-pt-[137px] scroll-smooth"
>
  <head>
    <script
      is:inline
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-LFRGN2J2RV"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-LFRGN2J2RV");
    </script>

    <script is:inline>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-573RDG5H");
    </script>

    <BaseHead title={title} description={description} image={image} />
    <ViewTransitions />
  </head>
  <body class="bg-background" class:list={classname}>
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-573RDG5H"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >

    <slot />
    <AsideTailwindClasses />

    {!isProd && <TailwindIndicator />}

    <script>
      const getTheme = () => {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme) return savedTheme;

        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const setTheme = (theme: string) => {
        if (theme === "light") {
          document.documentElement.classList.remove("dark");
          document.documentElement.setAttribute("data-theme", "light-plus");
        } else {
          document.documentElement.classList.add("dark");
          document.documentElement.setAttribute("data-theme", "dark-plus");
        }
      };

      window.addEventListener("DOMContentLoaded", () => setTheme(getTheme()));
      document.addEventListener("astro:after-swap", () => setTheme(getTheme()));

      const handleHeaderToggleClick = () => {
        const element = document.documentElement;
        element.classList.toggle("dark");

        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
        document.documentElement.setAttribute(
          "data-theme",
          isDark ? "dark-plus" : "light-plus",
        );
      };

      document
        .querySelectorAll("#header-toggle")
        .forEach((el) => el.addEventListener("click", handleHeaderToggleClick));

      document
        .querySelectorAll("#header-toggle-footer")
        .forEach((el) => el.addEventListener("click", handleHeaderToggleClick));
      document
        .querySelectorAll("#header-toggle-nav")
        .forEach((el) => el.addEventListener("click", handleHeaderToggleClick));
    </script>
    <script>
      // Type definitions
      type Theme = any;
      type MermaidConfig = {
        startOnLoad: boolean;
        fontFamily: string;
        theme: Theme;
      };

      interface MermaidAPI {
        initialize: (config: MermaidConfig) => void;
        render: (id: string, content: string) => Promise<{ svg: string }>;
      }

      declare module "mermaid" {
        const mermaid: MermaidAPI;
      }

      // Store original content to allow re-rendering
      const diagramContents = new Map();

      const getTheme = (): Theme => {
        const savedTheme = localStorage.getItem("theme") as Theme | null;
        if (savedTheme) return savedTheme;

        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "neutral";
      };

      async function renderDiagrams(
        graphs: HTMLCollectionOf<Element>,
        theme?: Theme,
      ) {
        const { default: mermaid } = await import("mermaid");

        // Reset mermaid with new theme
        mermaid.initialize({
          startOnLoad: false,
          fontFamily: "var(--sans-font)",
          theme: theme || getTheme(),
        });

        Array.from(graphs).forEach(async (graph) => {
          // Get content either from our stored map or from the element
          let content = diagramContents.get(graph);
          if (!content) {
            const contentElement = graph.querySelector(".mermaid-src");
            content = contentElement?.textContent || "";
            if (content) {
              diagramContents.set(graph, content);
            }
          }

          if (!content) return;

          // Clear the graph before re-rendering
          graph.innerHTML = "";

          const svg = document.createElement("svg");
          const id = `mermaid-${Math.round(Math.random() * 100000)}`;
          svg.id = id;

          graph.appendChild(svg);
          try {
            const result = await mermaid.render(id, content);
            graph.innerHTML = result.svg;
          } catch (error) {
            console.error("Failed to render mermaid diagram:", error);
            // Restore original content on error
            const contentElement = document.createElement("div");
            contentElement.className = "mermaid-src";
            contentElement.textContent = content;
            graph.appendChild(contentElement);
          }
        });
      }

      // Initial render
      const graphs = document.getElementsByClassName("mermaid");
      if (graphs.length > 0) {
        renderDiagrams(graphs);
      }

      // Watch for theme changes in localStorage
      window.addEventListener("storage", (e: StorageEvent) => {
        if (e.key === "theme") {
          const graphs = document.getElementsByClassName("mermaid");
          if (graphs.length > 0) {
            renderDiagrams(graphs, e.newValue as Theme);
          }
        }
      });

      // Watch for system theme changes
      const darkModeMediaQuery = window.matchMedia(
        "(prefers-color-scheme: dark)",
      );
      darkModeMediaQuery.addEventListener(
        "change",
        (e: MediaQueryListEvent) => {
          if (!localStorage.getItem("theme")) {
            const graphs = document.getElementsByClassName("mermaid");
            if (graphs.length > 0) {
              renderDiagrams(graphs, e.matches ? "dark" : "neutral");
            }
          }
        },
      );

      // Function to handle manual theme changes
      function updateMermaidTheme(newTheme: Theme): void {
        const graphs = document.getElementsByClassName("mermaid");
        if (graphs.length > 0) {
          renderDiagrams(graphs, newTheme);
        }
      }

      // Make updateMermaidTheme available globally
      (window as any).updateMermaidTheme = updateMermaidTheme;

      // Add a mutation observer to watch for theme attribute changes on body or html
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (
            mutation.attributeName === "data-theme" ||
            mutation.attributeName === "class"
          ) {
            const graphs = document.getElementsByClassName("mermaid");
            if (graphs.length > 0) {
              renderDiagrams(graphs, getTheme());
            }
          }
        });
      });

      // Start observing the document with the configured parameters
      observer.observe(document.documentElement, { attributes: true });
      observer.observe(document.body, { attributes: true });
    </script>
    <script
      is:inline
      async
      src="https://pxl.growth-channel.net/s/8d425860-cf3c-49cf-a459-069a7dc7b1f8"
    ></script>
  </body>
</html>
