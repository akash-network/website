---
import ProjectCard from "@/components/ecosystem-pages/project-card.astro";
import SortDropDown from "@/components/ecosystem-pages/sort-dropdown";
import TagsSortDropDown from "@/components/ecosystem-pages/tags-sort-dropdown";
import Pagination from "@/components/pagination.astro";
import Layout from "@/layouts/layout.astro";
import type { PaginateFunction } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";

import Categories from "@/components/ecosystem-pages/categories.astro";
import TopHeader from "@/components/ecosystem-pages/top-header.astro";
import TopMargin from "@/components/ui/top-margin.astro";
import { getPriorityIndex } from "@/utils/sequences/deployedOnAkash";

type Project = CollectionEntry<"Ecosystem_Page">;

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const projects = (await getCollection("Ecosystem_Page"))
    .filter((project) => project.data.category === "deployed_on_akash")
    .sort((a, b) => {
      const dateA = new Date(a.data.pubDate);
      const dateB = new Date(b.data.pubDate);

      // Sort in descending order (latest date first)
      return dateB.getTime() - dateA.getTime();
    });

  const tags: string[] = [];

  projects.forEach((project) => {
    // Loop through the tags in each blog post
    project.data.tags.forEach((tag: any) => {
      // Capitalize the first letter of the tag
      const lowerCasedTag = tag.toLowerCase();
      // Check if the tag is not already in the allTags array
      if (!tags.includes(lowerCasedTag)) {
        // Add the tag to the allTags array
        tags.push(lowerCasedTag);
      }
    });
  });

  return paginate(projects, {
    props: { tags: tags },
    pageSize: 9,
  });
}

const { page, tags } = Astro.props;
const astroUrl = Astro.url;
---

<Layout title={`Deployed On Akash`} image="/meta-images/ecosystem.png">
  <TopMargin>
    <TopHeader tags={tags} />
  </TopMargin>

  <div
    class="container mt-10 flex justify-between lg:gap-x-[20px] xl:gap-x-[48px]"
  >
    <Categories tags={tags} />

    <div>
      <div class="flex items-center justify-between">
        <h3
          class="text-[20px] font-bold leading-[28px] md:text-2lg md:leading-[48px]"
        >
          Deployed On Akash
        </h3>

        <div>
          {
            astroUrl.pathname.split("/")[3] === "latest" ||
            astroUrl.pathname.split("/")[3] === "oldest" ? (
              <SortDropDown client:load currentPath={astroUrl.pathname} />
            ) : (
              <TagsSortDropDown client:load currentPath={astroUrl.pathname} />
            )
          }
        </div>
      </div>

      <div
        class="mt-4 grid flex-shrink-0 grid-cols-1 gap-y-[24px] sm:grid-cols-2 sm:gap-x-8 md:gap-y-8 lg:grid-cols-3 lg:gap-x-[36px] lg:gap-y-[32px]"
      >
        {
          [...page.data]
            .sort(
              (a, b) =>
                getPriorityIndex(a.data.projectTitle) -
                getPriorityIndex(b.data.projectTitle),
            )
            ?.map((project: Project, i: number) => {
              return (
                <ProjectCard
                  title={project.data.projectTitle}
                  description={project.data.description}
                  image={project.data.projectImage}
                  button={project.data.ctaButton}
                  githubLink={project.data.githubLink}
                  twitterLink={project.data.twitterLink}
                  websiteLink={project.data.websiteLink}
                  discordLink={project.data.discordLink}
                />
              );
            })
        }
      </div>

      <Pagination page={page} />
    </div>
  </div>
</Layout>
