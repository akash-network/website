---
import Layout from "@/layouts/layout.astro";
import ProjectCard from "@/components/ecosystem-pages/project-card.astro";
import { SortActions } from "../../../../components/ecosystem-pages/sort-actions";
import Pagination from "@/components/pagination.astro";
import Tag from "@/components/ui/tag.astro";
import { Image } from "astro:assets";
import ChevronRight from "@/assets/chevron-right.svg";
import { getCollection, type CollectionEntry } from "astro:content";
import type { PaginateFunction } from "astro";
import EcosystemNavbar from "@/components/ecosystem-pages/ecosystem-navbar.astro";
import SearchDialog from "@/components/ecosystem-pages/search-dialog";
import SortDropDown from "@/components/ecosystem-pages/sort-dropdown";
import TagsSortDropDown from "@/components/ecosystem-pages/tags-sort-dropdown";

import TopMargin from "@/components/ui/top-margin.astro";
import TopHeader from "@/components/ecosystem-pages/top-header.astro";
import Categories from "@/components/ecosystem-pages/categories.astro";
import { getPriorityIndex } from "@/utils/sequences/deployedOnAkash";
type Project = CollectionEntry<"Ecosystem_Page">;

// Define a function to generate static paths
export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  // Retrieve the collection of "AkashTools_Page" and sort it by publication date
  const projects = (await getCollection("Ecosystem_Page"))
    .filter((project) => project.data.showcase === true)
    .sort((a, b) => {
      const dateA = new Date(a.data.pubDate);
      const dateB = new Date(b.data.pubDate);

      // Sort in decending order of date
      return dateB.getTime() - dateA.getTime();
    });

  // Initialize an array to store unique tags
  const tags: string[] = [];

  // Loop through each project
  projects.forEach((project) => {
    // Loop through the tags in each project
    project.data.tags.forEach((tag: string) => {
      // Capitalize the first letter of the tag and convert it to lowercase
      const lowerCasedTag = tag.toLowerCase();

      // Check if the tag is not already in the 'tags' array
      if (!tags.includes(lowerCasedTag)) {
        // Add the tag to the 'tags' array
        tags.push(lowerCasedTag);
      }
    });
  });

  // Paginate the projects and pass the tags as props
  return paginate(projects, {
    props: { tags: tags },
    pageSize: 9,
  });
}

// Destructure data from Astro.props
const { page, tags } = Astro.props;

// Access the current URL from Astro.url
const astroUrl = Astro.url;

const pathName = astroUrl.pathname.split("/");
---

<Layout title={`Showcase`} image="/meta-images/ecosystem.png">
  <TopMargin>
    <TopHeader />
  </TopMargin>

  <!-- <div class="container">
    <div class="mt-10 hidden gap-x-5 overflow-x-auto md:flex lg:hidden">
      {
        tags
          .sort(() => Math.random() - 0.5)
          .map((tag: string) => (
            <Tag href={`/ecosystem/showcase/${tag.toLowerCase()}/latest/1`}>
              {tag.charAt(0).toUpperCase() + tag.slice(1)}
            </Tag>
          ))
      }
    </div>
  </div> -->

  <!-- <div class="container mt-10 flex gap-x-5 overflow-x-auto md:hidden">
    {
      tags
        .sort(() => Math.random() - 0.5)
        .map((tag: string) => (
          <Tag href={`/ecosystem/showcase/${tag.toLowerCase()}/latest/1`}>
            {tag.charAt(0).toUpperCase() + tag.slice(1)}
          </Tag>
        ))
    }
  </div> -->

  <div
    class="container mt-10 flex justify-between lg:gap-x-[20px] xl:gap-x-[48px]"
  >
    <Categories tags={tags} />

    <div>
      <div class="flex items-center justify-between">
        <h3
          class="text-[20px] font-bold leading-[28px] md:text-2lg md:leading-[48px]"
        >
          {pathName?.[2]?.charAt(0).toUpperCase() + pathName?.[2]?.slice(1)}
        </h3>

        <div>
          {
            astroUrl.pathname.split("/")[3] === "latest" ||
            astroUrl.pathname.split("/")[3] === "oldest" ? (
              <SortDropDown client:load currentPath={astroUrl.pathname} />
            ) : (
              <TagsSortDropDown client:load currentPath={astroUrl.pathname} />
            )
          }
        </div>
      </div>

      <div
        class="mt-4 grid flex-shrink-0 grid-cols-1 gap-y-[24px] sm:grid-cols-2 sm:gap-x-8 md:gap-y-8 lg:grid-cols-3 lg:gap-x-[36px] lg:gap-y-[32px]"
      >
        {
          [...page.data]
            .sort(
              (a, b) =>
                getPriorityIndex(a.data.projectTitle) -
                getPriorityIndex(b.data.projectTitle),
            )
            ?.map((project: Project, i: number) => {
              return (
                <ProjectCard
                  title={project.data.projectTitle}
                  description={project.data.description}
                  image={project.data.projectImage}
                  button={project.data.ctaButton}
                  githubLink={project.data.githubLink}
                  twitterLink={project.data.twitterLink}
                  websiteLink={project.data.websiteLink}
                  discordLink={project.data.discordLink}
                />
              );
            })
        }
      </div>

      <Pagination page={page} />
    </div>
  </div>
</Layout>
