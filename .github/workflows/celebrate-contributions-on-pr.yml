name: Celebrating Contributions

on:
  pull_request_target:
    types: [closed]

permissions:
  pull-requests: write

jobs:
  comment_on_merged_pull_request:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Environment Variables
        env:
          AUTHOR: ${{ github.event.pull_request.user.login }}
          REPO: ${{ github.event.repository.name }}
          OWNER: ${{ github.event.repository.owner.login }}
        run: |
          echo "AUTHOR=${AUTHOR}" >> $GITHUB_ENV
          echo "REPO=${REPO}" >> $GITHUB_ENV
          echo "OWNER=${OWNER}" >> $GITHUB_ENV

      - name: Count Merged Pull Requests
        id: count_merged_pull_requests
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const author = process.env.AUTHOR;
            const repo = process.env.REPO;
            const owner = process.env.OWNER;
            const { data } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} type:pr state:closed author:${author}`
            });
            const prCount = data.items.filter(pr => pr.pull_request.merged_at).length;
            core.exportVariable('PR_COUNT', prCount);

      - name: Comment on the Merged Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prCount = parseInt(process.env.PR_COUNT);
            const author = process.env.AUTHOR;
            const mention = 'fenilmodi00'; // Update if the mention needs to change
            const prNumber = context.payload.pull_request.number;
            const repo = process.env.REPO;

            function getMessage(count) {
              switch(count) {
                case 1:
                  return `**Congratulations @${author}!** Your first PR to ${repo} has been successfully merged.\n\n` +
                         `It's great to have you contributing to the project. We hope this is the start of many more contributions. ` +
                         `Feel free to reach out to @${mention} if you have any questions or need guidance. ðŸŽ‰`;
                case 2:
                  return `**Well done @${author}!** Two PRs merged already.\n\n` +
                         `You're making meaningful contributions to ${repo}. Keep up the good work, and don't hesitate to connect with @${mention} for any support.`;
                case 3:
                  return `**Impressive work @${author}!** Three PRs merged.\n\n` +
                         `Your consistent contributions are valuable to ${repo}. Consider taking on more challenging issues to continue growing. @${mention} is available if you need guidance.`;
                case 5:
                  return `**High five, @${author}!** Five PRs merged.\n\n` +
                         `Your dedication is shaping the direction of ${repo}. We'd love to hear your ideas on improvements or features. Keep it going!`;
                case 10:
                  return `**Amazing milestone @${author}!** Ten PRs merged.\n\n` +
                         `You're becoming a pillar of the community around ${repo}. Consider mentoring newer contributors and sharing your insights.`;
                default:
                  if (count > 10) {
                    return `**Outstanding, @${author}!** You've merged ${count} PRs.\n\n` +
                           `Your ongoing contributions are driving ${repo} forward. We truly appreciate your efforts and look forward to seeing what you tackle next.`;
                  } else {
                    return `**Great job, @${author}!** This marks your ${count}th merged PR.\n\n` +
                           `Your contributions are making a positive impact on ${repo}. Keep up the excellent work.`;
                  }
              }
            }

            const message = getMessage(prCount);
            
            await github.rest.issues.createComment({
              owner: process.env.OWNER,
              repo: process.env.REPO,
              issue_number: prNumber,
              body: message
            });

